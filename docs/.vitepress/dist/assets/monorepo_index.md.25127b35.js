import { _ as s, c as a, a as n, f as e } from "./app.1fad655d.js";
const F = JSON.parse(
    '{"title":"Monorepo","description":"Introducci\xF3n a Monorepo","frontmatter":{"lang":"es-ES","title":"Monorepo","description":"Introducci\xF3n a Monorepo"},"headers":[{"level":2,"title":"Workspaces","slug":"workspaces","link":"#workspaces","children":[]},{"level":2,"title":"Convenci\xF3n de nombres","slug":"convencion-de-nombres","link":"#convencion-de-nombres","children":[]},{"level":2,"title":"Dependencias","slug":"dependencias","link":"#dependencias","children":[{"level":3,"title":"Dependencias de los workspaces","slug":"dependencias-de-los-workspaces","link":"#dependencias-de-los-workspaces","children":[]},{"level":3,"title":"Configuraci\xF3n de dependencias globales","slug":"configuracion-de-dependencias-globales","link":"#configuracion-de-dependencias-globales","children":[]},{"level":3,"title":"Conflictos de dependencias","slug":"conflictos-de-dependencias","link":"#conflictos-de-dependencias","children":[]}]},{"level":2,"title":"Lerna","slug":"lerna","link":"#lerna","children":[{"level":3,"title":"Instalaci\xF3n","slug":"instalacion","link":"#instalacion","children":[]},{"level":3,"title":"Comandos","slug":"comandos","link":"#comandos","children":[]}]},{"level":2,"title":"Scripty","slug":"scripty","link":"#scripty","children":[]},{"level":2,"title":"Commits CommitLint","slug":"commits-commitlint","link":"#commits-commitlint","children":[{"level":3,"title":"Conventional Changelog","slug":"conventional-changelog","link":"#conventional-changelog","children":[]}]},{"level":2,"title":"Documentaci\xF3n","slug":"documentacion","link":"#documentacion","children":[{"level":3,"title":"API Extractor","slug":"api-extractor","link":"#api-extractor","children":[]}]}],"relativePath":"monorepo/index.md"}'
  ),
  o = { name: "monorepo/index.md" },
  l = e(
    `<h1 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-hidden="true">#</a></h1><p>Monorepo = Un repositorio.</p><p><strong>Multiples paquetes que tienen interdependencias entre ellos, por lo que estan entrelazados, y que se gestionan desde un solo repositorio.</strong></p><p>Al gestionar los paquetes desde un solo repositiorio, podemos dividirlos y tratarlo como capas independientes, lo que aumenta la <strong>encapsulaci\xF3n</strong>. Por lo que dentro de un repositorio tenemos diferentes bibliotecas|componentes|paquetes|modulos|etc.</p><p>Adem\xE1s, al tener un solo repositorio, podemos tener un solo flujo de trabajo por lo que al hacer un commit, puede modificar varios paquetes, y el commit mantiene un <strong>unico historial de cambios</strong>. Esto nos permite tener un control de versiones mucho m\xE1s sencillo, y hacer un seguimiento m\xE1s simple de los errores.</p><h2 id="workspaces" tabindex="-1">Workspaces <a class="header-anchor" href="#workspaces" aria-hidden="true">#</a></h2><p>Los workspaces son una caracter\xEDstica de npm que nos permite gestionar paquetes dentro de un mismo repositorio. Para ello, debemos definir los paquetes que queremos gestionar en el archivo <code>package.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-notes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// * cualquier subdirectorio dentro de packages</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="convencion-de-nombres" tabindex="-1">Convenci\xF3n de nombres <a class="header-anchor" href="#convencion-de-nombres" aria-hidden="true">#</a></h2><p>Para que los workspaces funcionen correctamente, debemos seguir una convenci\xF3n de nombres. Por ejemplo, si tenemos un paquete llamado <code>types</code>, el nombre del paquete en el <code>package.json</code> debe ser <code>@awesome/types</code>. @awesome es el nombre del scope, y types es el nombre del paquete. Y el nombre del scope tiene que ser utilizado en los otros paquetes. De esta forma esta nomenclatura nos permite identificar que paquetes pertenecen al mismo repositorio.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// packages/types/package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@awesome/types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">typescript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^4.0.3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="dependencias" tabindex="-1">Dependencias <a class="header-anchor" href="#dependencias" aria-hidden="true">#</a></h2><h3 id="dependencias-de-los-workspaces" tabindex="-1">Dependencias de los workspaces <a class="header-anchor" href="#dependencias-de-los-workspaces" aria-hidden="true">#</a></h3><p>En el caso de types/package.json, tiene una dependencia de typescript. Mientras que nuestro package.json de raiz no tiene ninguna dependencia.</p><p>Ahora bien, al momento de instalar las dependencias, npm instala las dependencias de los paquetes en el directorio raiz.</p><p>Ejemplo, con yarn, al hacer un yarn.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">//yarn.lock</span></span>
<span class="line"><span style="color:#A6ACCD;">typescript@^4.0.3:</span></span>
<span class="line"><span style="color:#A6ACCD;">  version &quot;4.8.4&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  resolved &quot;https://registry.yarnpkg.com/typescript/-/typescript-4.8.4.tgz#c464abca159669597be5f96b8943500b238e60e6&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  integrity sha512-QCh+85mCy+h0IGff8r5XWzOVSbBO+KfeYrMQh7NJ58QujwcE22u+NUSmUxqF+un70P9GXKxa2HCNiTTMJknyjQ==</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="configuracion-de-dependencias-globales" tabindex="-1">Configuraci\xF3n de dependencias globales <a class="header-anchor" href="#configuracion-de-dependencias-globales" aria-hidden="true">#</a></h3><p>Al package.json de raiz, solo tenemos que instalar las dependencias a nivel global que sirvan para la experiencia de desarollo, no debemos intalar dependencias que aporten funcionalidad.</p><p>Es muy frequente que los paquetes tengan por ejemplo eslint/babel/jest... Para evitar tener que instalarlo en cada paquete, podemos instalarlo de forma global. Para ello, debemos configurar el archivo <code>package.json</code> de la siguiente forma:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-notes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^8.5.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Ahora bien, dentro de cada paquete puede tener sus propias reglas o no. En el caso de unas reglas globales, podemos configurar el archivo <code>.eslintrc.js</code> en la raiz. Mientras que la configuraci\xF3n de cada paquete se puede configurar en el archivo <code>.eslintrc.js</code> de cada paquete, para que extienda de la configuraci\xF3n general.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// packages/types/.eslintrc</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;extends&quot;: &quot;../../.eslintrc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Al momento de querer interactuar con lint/jest... en cada paquete, debemos a\xF1adir un comando, por ejemplo:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// packages/types/package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint .</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Esto nos permite ejecutar el comando <code>yarn lint</code> o <code>yarn jest</code> en cada paquete. Incluso lo podemos ejecutar en el directorio raiz, <code>yarn jest</code> y ejecutar\xE1 todos los tests... de todos los paquetes. \xBFEntonces porque lo tengo que a\xF1adir en cada paquete?, por convenci\xF3n, porque quiz\xE1s dentro de un paquete la configuraci\xF3n o como se tienen que hacer los tests ser\xE1n diferentes. Ejemplo, componentes con css, que tome capturas de pantalla, etc.</p><h3 id="conflictos-de-dependencias" tabindex="-1">Conflictos de dependencias <a class="header-anchor" href="#conflictos-de-dependencias" aria-hidden="true">#</a></h3><p>Al tener diferentes paquetes, puede ser que usemos dos dependencias iguales, una en la raiz, y otra en el paquete. Ejemplo jest.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^27.4.5</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// packages/types/package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@awesome/types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^26.4.5</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>En este caso, npm/yarn instalar\xE1 la versi\xF3n 26.4.5 en el paquete types, y la versi\xF3n 27.4.5 en el directorio raiz. Es decir, de esta manera habr\xE1 una version local en el paquete types. Y otra version global en el directorio raiz.</p><h2 id="lerna" tabindex="-1">Lerna <a class="header-anchor" href="#lerna" aria-hidden="true">#</a></h2><p>Lerna nos soluciona un mont\xF3n de problemas que tenemos al trabajar con workspaces. Por ejemplo, la instalaci\xF3n de dependencias, la ejecuci\xF3n de scripts, la publicaci\xF3n de paquetes, etc. Por ejemplo, un caso que se nos estaba dando en los puntos previos es que teniamos que ejecutar cada script en su paquete, por ejemplo <code>yarn lint</code> en el paquete types. Con lerna podemos ejecutarlo en el directorio raiz, y lerna se encargar\xE1 de ejecutarlo <strong>en todos los paquetes</strong></p><h3 id="instalacion" tabindex="-1">Instalaci\xF3n <a class="header-anchor" href="#instalacion" aria-hidden="true">#</a></h3><p>Para instalar lerna, debemos ejecutar el siguiente comando:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn add -DW lerna</span></span>
<span class="line"><span style="color:#A6ACCD;">    or</span></span>
<span class="line"><span style="color:#A6ACCD;">volta install lerna</span></span>
<span class="line"><span style="color:#A6ACCD;">  or</span></span>
<span class="line"><span style="color:#A6ACCD;">npx lerna init</span></span>
<span class="line"></span></code></pre></div><p>En la configuraci\xF3n de lerna, podemos configurar el directorio de los paquetes, por defecto es <code>packages/*</code>. Seria como el workspaces de npm.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// lerna.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">packages</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>npmClient: Por defecto es npm, pero podemos configurarlo para que use yarn.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// lerna.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">npmClient</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>version: Por defecto es independent, que permite incrementar las versiones del paquete de forma independiente entre s\xED. Pero podemos configurarlo para que todas las versiones sean iguales, si queremo unir autom\xE1ticamente todas las versiones del paquete. Un problema con este enfoque es que un cambio importante en cualquier paquete dar\xE1 como resultado que todos los paquetes tengan una nueva versi\xF3n principal.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// lerna.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.0.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> || </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">independent</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>useWorkspaces: Por defecto es true, que permite que lerna use el workspaces de npm. Si lo configuramos a false, lerna no usar\xE1 el workspaces de npm, y tendremos que configurar lerna para que use el directorio de los paquetes.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// lerna.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">useWorkspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="comandos" tabindex="-1">Comandos <a class="header-anchor" href="#comandos" aria-hidden="true">#</a></h3><p>Lerna nos permite ejecutar comandos, los m\xE1s comunes son:</p><ul><li>lerna link - Conecta los paquetes entre s\xED, para que puedan importar entre s\xED. Por ejemplo, si tenemos un paquete types, y otro paquete utils, que importa types, lerna link nos permite que utils pueda importar types.</li><li>lerna bootstrap - Instala las dependencias de todos los paquetes, y hace como un yarn link.</li><li>lerna run <code>test</code> - Ejecuta un script <code>test</code> en todos los paquetes. Es como un forloop. <ul><li>lerna run <code>build</code> --concurrency 2 --stream Ejecutar\xE1 2 simultaneamente, y mostrar\xE1 el output en tiempo real. Porque hay paquetes que no tienen relaci\xF3n entre s\xED, y que no dependen de otros paquetes. Puede ser bastante \xFAtil para aligerar pipelines, lint, test...</li><li>lerna run <code>dev</code> --scope @awesome/ui --stream Ejecutar\xE1 el script dev en el paquete ui. Es como un yarn workspace @awesome/ui dev. Adem\xE1s, mostrar\xE1 el output (logs) en tiempo real.</li></ul></li><li>lerna exec <code>test</code> - Ejecuta un script <code>test</code> en todos los paquetes. Es como el caso anterior, pero permite comandos arbitrarios, como crear una carpeta, ls, etc.</li><li>lerna add <code>dependency</code> - Como yarn add, pero a\xF1ade la dependencia a todos los paquetes. <ul><li>lerna add <code>@awesome/types</code> --scope <code>package</code> - A\xF1ade la dependencia solo al paquete especificado.</li></ul></li></ul><h4 id="comandos-para-las-versiones" tabindex="-1">Comandos para las versiones <a class="header-anchor" href="#comandos-para-las-versiones" aria-hidden="true">#</a></h4><ul><li>lerna changed - Muestra los paquetes que han cambiado.</li><li>lerna list - Muestra los paquetes.</li><li>lerna version - interface para incrementar las versiones de los paquetes. <ul><li>lerna version --conventional-commits: no te pregunta, directamente hace lo que cree gracias a los commit conventions.</li></ul></li></ul><h2 id="scripty" tabindex="-1">Scripty <a class="header-anchor" href="#scripty" aria-hidden="true">#</a></h2><p>No es requerido, pero es una herramienta que nos permite ejecutar scripts. Nos ayuda a la gesti\xF3n del monorepo, y en caso de querer modificar un script, no tenemos que modificarlo en todos los paquetes.</p><p>Instalaci\xF3n:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn add -DW scripty</span></span>
<span class="line"><span style="color:#A6ACCD;">    or</span></span>
<span class="line"><span style="color:#A6ACCD;">volta install scripty</span></span>
<span class="line"></span></code></pre></div><p>Todos los script quedar\xEDan:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripty</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Se debe a\xF1adir el directorio de donde est\xE1n los scripts, adem\xE1s podemos tener m\xFAltiples directorios, por ejemplo, un directorio para el workspace y otro para los paquetes.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripty</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripty</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./scripts/workspace</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Crear carpeta scripts en el directorio ra\xEDz, y crear un archivo por cada script que queramos ejecutar. Por ejemplo, test.js</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// scripts/workspace/test.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#!/usr/bin/env bash</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn lerna run </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> --stream</span></span>
<span class="line"></span></code></pre></div><h2 id="commits-commitlint" tabindex="-1">Commits CommitLint <a class="header-anchor" href="#commits-commitlint" aria-hidden="true">#</a></h2><h3 id="conventional-changelog" tabindex="-1">Conventional Changelog <a class="header-anchor" href="#conventional-changelog" aria-hidden="true">#</a></h3><p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noreferrer">Conventional Changelog</a> Genera un changelog basado en los commits. Es decir, si tenemos un commit que diga <code>feat: add new feature</code>, generar\xE1 un changelog con la secci\xF3n feat, y el mensaje <code>add new feature</code>.</p><p>Instalaci\xF3n:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn add -WD @commitlint/cli @commitlint/config-conventional @commitlint/config-lerna-scopes commitlint husky lerna-changelog</span></span>
<span class="line"></span></code></pre></div><h4 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-hidden="true">#</a></h4><p>Husky nos permite ejecutar scripts antes de hacer un commit, por ejemplo, ejecutar el linter, o el test. En este caso, ejecutaremos el commitlint, para que nos muestre un error si el commit no cumple con las reglas.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">husky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hooks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">commit-msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">commitlint -E HUSKY_GIT_PARAMS</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="commitlint" tabindex="-1">commitlint <a class="header-anchor" href="#commitlint" aria-hidden="true">#</a></h4><p>Commitlint nos permite configurar las reglas de los commits. En este caso, usaremos las reglas de conventional-changelog y lerna-scopes.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// commitlint.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@commitlint/config-conventional</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@commitlint/config-lerna-scopes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Los scopes son los paquetes, por ejemplo, si tenemos un paquete utils, y queremos hacer un commit, el scope ser\xEDa utils.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feat(utils): add new feature</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="verdaccio" tabindex="-1">Verdaccio <a class="header-anchor" href="#verdaccio" aria-hidden="true">#</a></h4><p><a href="https://verdaccio.org/" target="_blank" rel="noreferrer">Verdaccio</a> es un servidor de paquetes privados. Nos permite publicar paquetes en un servidor local, y que otros desarrolladores puedan instalarlos.</p><p>Esto nos sirve sobretodo al principio, por no estar publicando paquetes en npm cuando estamos trasteando con los monorepos.</p><p>Instalaci\xF3n:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">volta install verdaccio</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn global add verdaccio</span></span>
<span class="line"></span></code></pre></div><p>.npmrc para que npm use verdaccio:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># .npmrc</span></span>
<span class="line"><span style="color:#A6ACCD;">registry=http://localhost:4873/</span></span>
<span class="line"></span></code></pre></div><p>Tambi\xE9n para descargar de ah\xED se le puede a\xF1adir el registry en el comando: npm i --registry <code>http://localhost:4873</code> myPackage</p><p>Tambi\xE9n nos sirve como como un cach\xE9 de sus paquetes NPM que funcionan sin conexi\xF3n, ya que todo se ejecuta en localhost.</p><h2 id="documentacion" tabindex="-1">Documentaci\xF3n <a class="header-anchor" href="#documentacion" aria-hidden="true">#</a></h2><h3 id="api-extractor" tabindex="-1">API Extractor <a class="header-anchor" href="#api-extractor" aria-hidden="true">#</a></h3><p><a href="https://api-extractor.com/" target="_blank" rel="noreferrer">API Extractor</a> es una herramienta que nos permite generar documentaci\xF3n de nuestros paquetes. Nos permite generar un fichero .d.ts, que es un fichero de definici\xF3n de tipos, y un fichero .api.json, que es un fichero con la documentaci\xF3n de los tipos.</p><p>Instalaci\xF3n:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn add -DW @microsoft/api-extractor</span></span>
<span class="line"></span></code></pre></div><p>Crea fichero api-extractor-base.json en la raiz del proyecto, con la configuraci\xF3n base. Del cual los otros paquetes extender\xE1n. <strong>Se puede mover a packages</strong>, para evitar tenerlo en la ra\xEDz.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn api-extractor init</span></span>
<span class="line"></span></code></pre></div><p>Dentro del archivo, api-extractor-base.json, estos campos s\xF3n relevantes: dtsRollup: genera un fichero .d.ts con todos los tipos de los paquetes. publicTrimmedFilePath: genera un fichero .api.md con la documentaci\xF3n de los tipos.</p><p>A\xF1adir un archivo api-extractor.json en cada paquete, que extienda de api-extractor-base.json. Ejemplo:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// api-extractor.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">$schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../api-extractor-base.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">mainEntryPointFilePath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;projectFolder&gt;/dist/index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Si es la primera vez, debemos asegurarnos que en cada paquete exista una carpeta etc</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">lerna </span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mkdir etc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Para generar los ficheros, ejecutar:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn api-extractor run --local</span></span>
<span class="line"></span></code></pre></div>`,
    95
  ),
  p = [l];
function t(c, r, i, d, D, y) {
  return n(), a("div", null, p);
}
const C = s(o, [["render", t]]);
export { F as __pageData, C as default };
